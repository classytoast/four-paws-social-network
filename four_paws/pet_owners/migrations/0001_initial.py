# Generated by Django 4.2.2 on 2023-07-05 18:42

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Owner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('date_of_birth', models.DateTimeField(blank=True, verbose_name='дата рождения пользователя')),
                ('avatar', models.ImageField(blank=True, upload_to='owners_photos/%Y/%m/%d/', verbose_name='фото пользователя')),
                ('date_of_registration', models.DateTimeField(auto_now_add=True, verbose_name='дата регистрации пользователя')),
                ('about_myself', models.TextField(blank=True, max_length=520, verbose_name='о себе')),
                ('instagram', models.URLField(blank=True, verbose_name='инстаграм')),
                ('vkontakte', models.URLField(blank=True, verbose_name='вконтакте')),
                ('youtube', models.URLField(blank=True, verbose_name='ютуб')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Animal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_of_animal', models.CharField(max_length=55, verbose_name='имя питомца')),
                ('animal_breed', models.CharField(blank=True, max_length=100, verbose_name='порода питомца')),
                ('date_of_animal_birth', models.DateTimeField(verbose_name='дата рождения питомца')),
                ('animal_photo', models.ImageField(upload_to='animals_photos/%Y/%m/%d/', verbose_name='фото питомца')),
                ('about_pet', models.TextField(max_length=520, verbose_name='о питомце')),
            ],
            options={
                'verbose_name': 'Питомец',
                'verbose_name_plural': 'Питомцы',
            },
        ),
        migrations.CreateModel(
            name='AnimalCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=255, verbose_name='вид домашнего животного')),
            ],
            options={
                'verbose_name': 'Вид',
                'verbose_name_plural': 'Виды',
            },
        ),
        migrations.CreateModel(
            name='OwnerPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=105, verbose_name='заголовок')),
                ('text_of_post', models.TextField(max_length=2000, verbose_name='текст поста')),
                ('is_published', models.BooleanField(default=True)),
                ('date_create', models.DateTimeField(auto_now_add=True, verbose_name='дата создания поста')),
                ('views', models.FloatField(verbose_name='просмотры')),
                ('likes', models.FloatField(verbose_name='лайки')),
                ('autor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='автор поста')),
            ],
            options={
                'verbose_name': 'Пост пользователя',
                'verbose_name_plural': 'Посты пользователей',
            },
        ),
        migrations.CreateModel(
            name='PostImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.ImageField(upload_to='img_of_post/%Y/%m/%d/', verbose_name='изображение')),
                ('animals_on_img', models.ManyToManyField(blank=True, to='pet_owners.animal', verbose_name='питомцы на фото')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='владелец фото')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='pet_owners.ownerpost', verbose_name='пост')),
            ],
        ),
        migrations.CreateModel(
            name='PostComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(max_length=550, verbose_name='комментарий')),
                ('date_create', models.DateTimeField(auto_now_add=True, verbose_name='дата')),
                ('likes', models.FloatField(verbose_name='лайки')),
                ('is_hidden', models.BooleanField(default=False, verbose_name='скрыт')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='pet_owners.ownerpost', verbose_name='пост')),
            ],
        ),
        migrations.CreateModel(
            name='AnimalFollower',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('join_date', models.DateTimeField(auto_now_add=True, verbose_name='дата подписки')),
                ('animal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to='pet_owners.animal', verbose_name='на кого подписан')),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to=settings.AUTH_USER_MODEL, verbose_name='подписчик')),
            ],
        ),
        migrations.AddField(
            model_name='animal',
            name='category_of_animal',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pet_owners.animalcategory', verbose_name='вид'),
        ),
        migrations.AddField(
            model_name='animal',
            name='pet_owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='владелец'),
        ),
    ]
